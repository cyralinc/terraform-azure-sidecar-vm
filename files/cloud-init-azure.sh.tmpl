curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg

echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

sudo apt-get update -y
sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin -y

function retry() {
  RETRIES=15
  while [ $RETRIES -gt 0 ]; do
    set +e
    $@
    RESULT=$?
    set -e
    if [ $RESULT -eq 0 ]; then
      echo "Success"
      return 0
    fi
    echo "Failed"
    sleep 5
    let RETRIES-=1
  done
  echo "Retries exceeded"
  exit 3
}

export PUBLIC_REPO=artifacts.cyralpublic.appspot.com
export GCS_API_ENDPOINT=https://storage.googleapis.com
export DOCKER_COMPOSE_VERSION=1.29.2
export JQ_VERSION=1.6
export BASTION_BOOTSTRAP_VERSION=0.1.1

# Install docker-compose
wget $GCS_API_ENDPOINT/$PUBLIC_REPO/sidecar/docker-compose/$DOCKER_COMPOSE_VERSION/docker-compose-Linux-x86_64
sudo mv docker-compose-`uname -s`-`uname -m` /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose
sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
docker-compose --version

# Configure fd limit for instance and containers
sudo bash -c 'cat > /etc/security/limits.d/fdlimit.conf' << EOF
*       soft  nofile  65535
*       hard  nofile  65535
EOF

sudo systemctl restart docker

# Add current user to docker group
sudo usermod -a -G docker ${username_vm}
newgrp docker

# Install JQ
wget -q $GCS_API_ENDPOINT/$PUBLIC_REPO/sidecar/jq/$JQ_VERSION/jq-linux64
sudo mv jq-linux64 /usr/local/bin/jq
sudo chmod a+x /usr/local/bin/jq
sudo ln -s /usr/local/bin/jq /usr/bin/jq
export PATH=$PATH:/usr/local/bin
jq --version

# echo "Fetching public hostname..."
export INSTANCE_ID=$HOSTNAME
echo "Setting INSTANCE_ID to '$INSTANCE_ID'"

export NGINX_RESOLVER=$(cat /etc/resolv.conf | grep nameserver | awk '{print $2}')
echo "Setting NGINX_RESOLVER to '$NGINX_RESOLVER'"

echo "Fetching secrets..."
mkdir -p /home/${username_vm}/cyral/

# Install Azure CLI
curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

az login --identity
secret_data=$(az keyvault secret show --vault-name ${key_vault_name} --name ${secrets_location} --query value -o tsv)
export SIDECAR_CLIENT_ID=$(echo "$secret_data" | jq -r .clientId)
export SIDECAR_CLIENT_SECRET=$(echo "$secret_data" | jq -r .clientSecret)
export WORKSPACE_ID=$(echo "$secret_data" | jq -r .workspaceId)
export PRIMARY_SHARED_KEY=$(echo "$secret_data" | jq -r .sharedPrimaryKey)
unset secret_data

echo "Initializing environment variables..."
cat > /home/${username_vm}/.env << EOF
SIDECAR_ID=${sidecar_id}
CONTROLPLANE_HOST=${controlplane_host}
CONTAINER_REGISTRY=${container_registry}
LOG_INTEGRATION=${log_integration}
METRICS_INTEGRATION=${metrics_integration}
HCVAULT_INTEGRATION_ID=${hc_vault_integration_id}
SECRETS_LOCATION=${secrets_location}
INSTANCE_ID=$INSTANCE_ID
SIDECAR_CLIENT_ID=$SIDECAR_CLIENT_ID
SIDECAR_CLIENT_SECRET=$SIDECAR_CLIENT_SECRET
SIDECAR_ENDPOINT=${sidecar_endpoint}
MONGODB_PORT_ALLOC_RANGE_LOW=${mongodb_port_alloc_range_low}
MONGODB_PORT_ALLOC_RANGE_HIGH=${mongodb_port_alloc_range_high}
MYSQL_MULTIPLEXED_PORT=${mysql_multiplexed_port}
WORKSPACE_ID=$WORKSPACE_ID
PRIMARY_SHARED_KEY=$PRIMARY_SHARED_KEY
EOF

echo "Downloading sidecar.compose.yaml..."

function get_token() {
  local url_token="${protocol}://${controlplane_host}:$1/v1/users/oidc/token"
  token=$(${curl} --fail --no-progress-meter --request POST "$url_token" -d grant_type=client_credentials -d client_id="$${SIDECAR_CLIENT_ID}" -d client_secret="$${SIDECAR_CLIENT_SECRET}" 2>&1)
  token_error=$(echo $?)
}

function download_sidecar() {
  echo "Executing download_sidecar function..."
  # Test default (443) and then 8000
  get_token "443"
  if [[ $token_error -ne 0 ]]; then
    get_token "8000"
    if [[ $token_error -ne 0 ]]; then
      return 1
    fi
  fi
  local access_token=$(echo "$token" | jq -r .access_token)
  local url="${protocol}://${controlplane_host}/deploy/docker-compose?TemplateVersion=${sidecar_version}&TemplateType=docker&LogIntegration=${log_integration}&secretManagerType=${secret_manager_type}&MetricsIntegration=${metrics_integration}&HCVaultIntegrationID=${hc_vault_integration_id}&WiresEnabled=${repositories_supported}"
  echo "Trying to download the sidecar template from: $url"
  if [[ $(${curl} -s -o /home/${username_vm}/sidecar.compose.yaml -w "%%{http_code}" -L "$url" -H "Authorization: Bearer $access_token") = 200 ]]; then
    return 0
  fi
  return 1
}

declare -f get_token
declare -f download_sidecar
retry download_sidecar

az keyvault secret show --vault-name ${key_vault_name} --name ${secrets_location} --query value -o tsv | jq -r .containerRegistryKey | base64 --decode > /home/${username_vm}/cyral/container_registry_key.json

function login () {  
  if [ -s /home/${username_vm}/cyral/container_registry_key.json ]; then
    echo "(login): Logging in to GCR..."
    cat /home/${username_vm}/cyral/container_registry_key.json | docker login -u _json_key --password-stdin https://gcr.io
  else
    echo "(login): Won't log in automatically to any image registry. Image registry set to: gcr.io/cyral-dev"
  fi
}

function launch () { cd /home/${username_vm} && sudo docker-compose -f sidecar.compose.yaml up -d; }
retry login
retry launch

unset SIDECAR_CLIENT_ID
unset SIDECAR_CLIENT_SECRET
